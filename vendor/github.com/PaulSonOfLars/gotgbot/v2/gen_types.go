// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"encoding/json"
	"fmt"
	"io"
)

type ReplyMarkup interface {
	ReplyMarkup() ([]byte, error)
}

// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
// https://core.telegram.org/bots/api#animation
type Animation struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Video width as defined by sender
	Width int64 `json:"width,omitempty"`
	// Video height as defined by sender
	Height int64 `json:"height,omitempty"`
	// Duration of the video in seconds as defined by sender
	Duration int64 `json:"duration,omitempty"`
	// Optional. Animation thumbnail as defined by sender
	Thumb *PhotoSize `json:"thumb,omitempty"`
	// Optional. Original animation filename as defined by sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// This object represents an audio file to be treated as music by the Telegram clients.
// https://core.telegram.org/bots/api#audio
type Audio struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Duration of the audio in seconds as defined by sender
	Duration int64 `json:"duration,omitempty"`
	// Optional. Performer of the audio as defined by sender or by audio tags
	Performer string `json:"performer,omitempty"`
	// Optional. Title of the audio as defined by sender or by audio tags
	Title string `json:"title,omitempty"`
	// Optional. Original filename as defined by sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
	// Optional. Thumbnail of the album cover to which the music file belongs
	Thumb *PhotoSize `json:"thumb,omitempty"`
}

// This object represents a bot command.
// https://core.telegram.org/bots/api#botcommand
type BotCommand struct {
	// Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
	Command string `json:"command,omitempty"`
	// Description of the command, 3-256 characters.
	Description string `json:"description,omitempty"`
}

// A placeholder, currently holds no information. Use BotFather to set up your game.
// https://core.telegram.org/bots/api#callbackgame
type CallbackGame interface{}

// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
// https://core.telegram.org/bots/api#callbackquery
type CallbackQuery struct {
	// Unique identifier for this query
	Id string `json:"id,omitempty"`
	// Sender
	From User `json:"from,omitempty"`
	// Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old
	Message *Message `json:"message,omitempty"`
	// Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
	InlineMessageId string `json:"inline_message_id,omitempty"`
	// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
	ChatInstance string `json:"chat_instance,omitempty"`
	// Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
	Data string `json:"data,omitempty"`
	// Optional. Short name of a Game to be returned, serves as the unique identifier for the game
	GameShortName string `json:"game_short_name,omitempty"`
}

// This object represents a chat.
// https://core.telegram.org/bots/api#chat
type Chat struct {
	// Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	Id int64 `json:"id,omitempty"`
	// Type of chat, can be either "private", "group", "supergroup" or "channel"
	Type string `json:"type,omitempty"`
	// Optional. Title, for supergroups, channels and group chats
	Title string `json:"title,omitempty"`
	// Optional. Username, for private chats, supergroups and channels if available
	Username string `json:"username,omitempty"`
	// Optional. First name of the other party in a private chat
	FirstName string `json:"first_name,omitempty"`
	// Optional. Last name of the other party in a private chat
	LastName string `json:"last_name,omitempty"`
	// Optional. Chat photo. Returned only in getChat.
	Photo *ChatPhoto `json:"photo,omitempty"`
	// Optional. Bio of the other party in a private chat. Returned only in getChat.
	Bio string `json:"bio,omitempty"`
	// Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
	Description string `json:"description,omitempty"`
	// Optional. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using exportChatInviteLink. Returned only in getChat.
	InviteLink string `json:"invite_link,omitempty"`
	// Optional. The most recent pinned message (by sending date). Returned only in getChat.
	PinnedMessage *Message `json:"pinned_message,omitempty"`
	// Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.
	Permissions *ChatPermissions `json:"permissions,omitempty"`
	// Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat.
	SlowModeDelay int64 `json:"slow_mode_delay,omitempty"`
	// Optional. For supergroups, name of group sticker set. Returned only in getChat.
	StickerSetName string `json:"sticker_set_name,omitempty"`
	// Optional. True, if the bot can change the group sticker set. Returned only in getChat.
	CanSetStickerSet bool `json:"can_set_sticker_set,omitempty"`
	// Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in getChat.
	LinkedChatId int64 `json:"linked_chat_id,omitempty"`
	// Optional. For supergroups, the location to which the supergroup is connected. Returned only in getChat.
	Location *ChatLocation `json:"location,omitempty"`
}

// Represents a location to which a chat is connected.
// https://core.telegram.org/bots/api#chatlocation
type ChatLocation struct {
	// The location to which the supergroup is connected. Can't be a live location.
	Location Location `json:"location,omitempty"`
	// Location address; 1-64 characters, as defined by the chat owner
	Address string `json:"address,omitempty"`
}

// This object contains information about one member of a chat.
// https://core.telegram.org/bots/api#chatmember
type ChatMember struct {
	// Information about the user
	User User `json:"user,omitempty"`
	// The member's status in the chat. Can be "creator", "administrator", "member", "restricted", "left" or "kicked"
	Status string `json:"status,omitempty"`
	// Optional. Owner and administrators only. Custom title for this user
	CustomTitle string `json:"custom_title,omitempty"`
	// Optional. Owner and administrators only. True, if the user's presence in the chat is hidden
	IsAnonymous bool `json:"is_anonymous,omitempty"`
	// Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
	CanBeEdited bool `json:"can_be_edited,omitempty"`
	// Optional. Administrators only. True, if the administrator can post in the channel; channels only
	CanPostMessages bool `json:"can_post_messages,omitempty"`
	// Optional. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
	CanEditMessages bool `json:"can_edit_messages,omitempty"`
	// Optional. Administrators only. True, if the administrator can delete messages of other users
	CanDeleteMessages bool `json:"can_delete_messages,omitempty"`
	// Optional. Administrators only. True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers bool `json:"can_restrict_members,omitempty"`
	// Optional. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
	CanPromoteMembers bool `json:"can_promote_members,omitempty"`
	// Optional. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
	CanChangeInfo bool `json:"can_change_info,omitempty"`
	// Optional. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users,omitempty"`
	// Optional. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
	// Optional. Restricted only. True, if the user is a member of the chat at the moment of the request
	IsMember bool `json:"is_member,omitempty"`
	// Optional. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
	CanSendMessages bool `json:"can_send_messages,omitempty"`
	// Optional. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
	CanSendMediaMessages bool `json:"can_send_media_messages,omitempty"`
	// Optional. Restricted only. True, if the user is allowed to send polls
	CanSendPolls bool `json:"can_send_polls,omitempty"`
	// Optional. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
	CanSendOtherMessages bool `json:"can_send_other_messages,omitempty"`
	// Optional. Restricted only. True, if the user is allowed to add web page previews to their messages
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`
	// Optional. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
	UntilDate int64 `json:"until_date,omitempty"`
}

// Describes actions that a non-administrator user is allowed to take in a chat.
// https://core.telegram.org/bots/api#chatpermissions
type ChatPermissions struct {
	// Optional. True, if the user is allowed to send text messages, contacts, locations and venues
	CanSendMessages bool `json:"can_send_messages,omitempty"`
	// Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages
	CanSendMediaMessages bool `json:"can_send_media_messages,omitempty"`
	// Optional. True, if the user is allowed to send polls, implies can_send_messages
	CanSendPolls bool `json:"can_send_polls,omitempty"`
	// Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages
	CanSendOtherMessages bool `json:"can_send_other_messages,omitempty"`
	// Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`
	// Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
	CanChangeInfo bool `json:"can_change_info,omitempty"`
	// Optional. True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users,omitempty"`
	// Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
}

// This object represents a chat photo.
// https://core.telegram.org/bots/api#chatphoto
type ChatPhoto struct {
	// File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	SmallFileId string `json:"small_file_id,omitempty"`
	// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	SmallFileUniqueId string `json:"small_file_unique_id,omitempty"`
	// File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	BigFileId string `json:"big_file_id,omitempty"`
	// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	BigFileUniqueId string `json:"big_file_unique_id,omitempty"`
}

// Represents a result of an inline query that was chosen by the user and sent to their chat partner.
// Note: It is necessary to enable inline feedback via @Botfather in order to receive these objects in updates.
// https://core.telegram.org/bots/api#choseninlineresult
type ChosenInlineResult struct {
	// The unique identifier for the result that was chosen
	ResultId string `json:"result_id,omitempty"`
	// The user that chose the result
	From User `json:"from,omitempty"`
	// Optional. Sender location, only for bots that require user location
	Location *Location `json:"location,omitempty"`
	// Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
	InlineMessageId string `json:"inline_message_id,omitempty"`
	// The query that was used to obtain the result
	Query string `json:"query,omitempty"`
}

// This object represents a phone contact.
// https://core.telegram.org/bots/api#contact
type Contact struct {
	// Contact's phone number
	PhoneNumber string `json:"phone_number,omitempty"`
	// Contact's first name
	FirstName string `json:"first_name,omitempty"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Contact's user identifier in Telegram
	UserId int64 `json:"user_id,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard
	Vcard string `json:"vcard,omitempty"`
}

// This object represents an animated emoji that displays a random value.
// https://core.telegram.org/bots/api#dice
type Dice struct {
	// Emoji on which the dice throw animation is based
	Emoji string `json:"emoji,omitempty"`
	// Value of the dice, 1-6 for "" and "" base emoji, 1-5 for "" and "" base emoji, 1-64 for "" base emoji
	Value int64 `json:"value,omitempty"`
}

// This object represents a general file (as opposed to photos, voice messages and audio files).
// https://core.telegram.org/bots/api#document
type Document struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Optional. Document thumbnail as defined by sender
	Thumb *PhotoSize `json:"thumb,omitempty"`
	// Optional. Original filename as defined by sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// Contains data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.
// https://core.telegram.org/bots/api#encryptedcredentials
type EncryptedCredentials struct {
	// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication
	Data string `json:"data,omitempty"`
	// Base64-encoded data hash for data authentication
	Hash string `json:"hash,omitempty"`
	// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
	Secret string `json:"secret,omitempty"`
}

// Contains information about documents or other Telegram Passport elements shared with the bot by the user.
// https://core.telegram.org/bots/api#encryptedpassportelement
type EncryptedPassportElement struct {
	// Element type. One of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration", "phone_number", "email".
	Type string `json:"type,omitempty"`
	// Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for "personal_details", "passport", "driver_license", "identity_card", "internal_passport" and "address" types. Can be decrypted and verified using the accompanying EncryptedCredentials.
	Data string `json:"data,omitempty"`
	// Optional. User's verified phone number, available only for "phone_number" type
	PhoneNumber string `json:"phone_number,omitempty"`
	// Optional. User's verified email address, available only for "email" type
	Email string `json:"email,omitempty"`
	// Optional. Array of encrypted files with documents provided by the user, available for "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Files []PassportFile `json:"files,omitempty"`
	// Optional. Encrypted file with the front side of the document, provided by the user. Available for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	FrontSide *PassportFile `json:"front_side,omitempty"`
	// Optional. Encrypted file with the reverse side of the document, provided by the user. Available for "driver_license" and "identity_card". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	ReverseSide *PassportFile `json:"reverse_side,omitempty"`
	// Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	Selfie *PassportFile `json:"selfie,omitempty"`
	// Optional. Array of encrypted files with translated versions of documents provided by the user. Available if requested for "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Translation []PassportFile `json:"translation,omitempty"`
	// Base64-encoded element hash for using in PassportElementErrorUnspecified
	Hash string `json:"hash,omitempty"`
}

// This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
// https://core.telegram.org/bots/api#file
type File struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Optional. File size, if known
	FileSize int64 `json:"file_size,omitempty"`
	// Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
	FilePath string `json:"file_path,omitempty"`
}

// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
// https://core.telegram.org/bots/api#forcereply
type ForceReply struct {
	// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
	ForceReply bool `json:"force_reply,omitempty"`
	// Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
	Selective bool `json:"selective,omitempty"`
}

func (v ForceReply) ReplyMarkup() ([]byte, error) {
	return json.Marshal(v)
}

// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
// https://core.telegram.org/bots/api#game
type Game struct {
	// Title of the game
	Title string `json:"title,omitempty"`
	// Description of the game
	Description string `json:"description,omitempty"`
	// Photo that will be displayed in the game message in chats.
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
	Text string `json:"text,omitempty"`
	// Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
	TextEntities []MessageEntity `json:"text_entities,omitempty"`
	// Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
	Animation *Animation `json:"animation,omitempty"`
}

// This object represents one row of the high scores table for a game.
// And that's about all we've got for now.If you've got any questions, please check out our Bot FAQ »
// https://core.telegram.org/bots/api#gamehighscore
type GameHighScore struct {
	// Position in high score table for the game
	Position int64 `json:"position,omitempty"`
	// User
	User User `json:"user,omitempty"`
	// Score
	Score int64 `json:"score,omitempty"`
}

// This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
// https://core.telegram.org/bots/api#inlinekeyboardbutton
type InlineKeyboardButton struct {
	// Label text on the button
	Text string `json:"text,omitempty"`
	// Optional. HTTP or tg:// url to be opened when button is pressed
	Url string `json:"url,omitempty"`
	// Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.
	LoginUrl *LoginUrl `json:"login_url,omitempty"`
	// Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes
	CallbackData string `json:"callback_data,omitempty"`
	// Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
	SwitchInlineQuery string `json:"switch_inline_query,omitempty"`
	// Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
	SwitchInlineQueryCurrentChat string `json:"switch_inline_query_current_chat,omitempty"`
	// Optional. Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row.
	CallbackGame *CallbackGame `json:"callback_game,omitempty"`
	// Optional. Specify True, to send a Pay button.NOTE: This type of button must always be the first button in the first row.
	Pay bool `json:"pay,omitempty"`
}

// This object represents an inline keyboard that appears right next to the message it belongs to.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported message.
// https://core.telegram.org/bots/api#inlinekeyboardmarkup
type InlineKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of InlineKeyboardButton objects
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard,omitempty"`
}

func (v InlineKeyboardMarkup) ReplyMarkup() ([]byte, error) {
	return json.Marshal(v)
}

// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
// https://core.telegram.org/bots/api#inlinequery
type InlineQuery struct {
	// Unique identifier for this query
	Id string `json:"id,omitempty"`
	// Sender
	From User `json:"from,omitempty"`
	// Optional. Sender location, only for bots that request user location
	Location *Location `json:"location,omitempty"`
	// Text of the query (up to 256 characters)
	Query string `json:"query,omitempty"`
	// Offset of the results to be returned, can be controlled by the bot
	Offset string `json:"offset,omitempty"`
}

// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
// https://core.telegram.org/bots/api#inlinequeryresult
type InlineQueryResult interface {
	InlineQueryResult() ([]byte, error)
}

// Represents a link to an article or web page.
// https://core.telegram.org/bots/api#inlinequeryresultarticle
type InlineQueryResultArticle struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id,omitempty"`
	// Title of the result
	Title string `json:"title,omitempty"`
	// Content of the message to be sent
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. URL of the result
	Url string `json:"url,omitempty"`
	// Optional. Pass True, if you don't want the URL to be shown in the message
	HideUrl bool `json:"hide_url,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Thumbnail width
	ThumbWidth int64 `json:"thumb_width,omitempty"`
	// Optional. Thumbnail height
	ThumbHeight int64 `json:"thumb_height,omitempty"`
}

func (v InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultArticle
	a := struct {
		Type string
		alias
	}{
		Type:  "article",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultArticle) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultaudio
type InlineQueryResultAudio struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL for the audio file
	AudioUrl string `json:"audio_url,omitempty"`
	// Title
	Title string `json:"title,omitempty"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Performer
	Performer string `json:"performer,omitempty"`
	// Optional. Audio duration in seconds
	AudioDuration int64 `json:"audio_duration,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the audio
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultAudio
	a := struct {
		Type string
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultAudio) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultcachedaudio
type InlineQueryResultCachedAudio struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier for the audio file
	AudioFileId string `json:"audio_file_id,omitempty"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the audio
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedAudio) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedAudio
	a := struct {
		Type string
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedAudio) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultcacheddocument
type InlineQueryResultCachedDocument struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// Title for the result
	Title string `json:"title,omitempty"`
	// A valid file identifier for the file
	DocumentFileId string `json:"document_file_id,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the file
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedDocument) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedDocument
	a := struct {
		Type string
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedDocument) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
// https://core.telegram.org/bots/api#inlinequeryresultcachedgif
type InlineQueryResultCachedGif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier for the GIF file
	GifFileId string `json:"gif_file_id,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the GIF animation
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedGif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedGif
	a := struct {
		Type string
		alias
	}{
		Type:  "gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedGif) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
// https://core.telegram.org/bots/api#inlinequeryresultcachedmpeg4gif
type InlineQueryResultCachedMpeg4Gif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier for the MP4 file
	Mpeg4FileId string `json:"mpeg4_file_id,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video animation
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedMpeg4Gif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedMpeg4Gif
	a := struct {
		Type string
		alias
	}{
		Type:  "mpeg4_gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedMpeg4Gif) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
// https://core.telegram.org/bots/api#inlinequeryresultcachedphoto
type InlineQueryResultCachedPhoto struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier of the photo
	PhotoFileId string `json:"photo_file_id,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the photo
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedPhoto) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedPhoto
	a := struct {
		Type string
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedPhoto) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
// Note: This will only work in Telegram versions released after 9 April, 2016 for static stickers and after 06 July, 2019 for animated stickers. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultcachedsticker
type InlineQueryResultCachedSticker struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier of the sticker
	StickerFileId string `json:"sticker_file_id,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the sticker
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedSticker) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedSticker
	a := struct {
		Type string
		alias
	}{
		Type:  "sticker",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedSticker) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
// https://core.telegram.org/bots/api#inlinequeryresultcachedvideo
type InlineQueryResultCachedVideo struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier for the video file
	VideoFileId string `json:"video_file_id,omitempty"`
	// Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedVideo) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedVideo
	a := struct {
		Type string
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedVideo) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultcachedvoice
type InlineQueryResultCachedVoice struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid file identifier for the voice message
	VoiceFileId string `json:"voice_file_id,omitempty"`
	// Voice message title
	Title string `json:"title,omitempty"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the voice message
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultCachedVoice) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedVoice
	a := struct {
		Type string
		alias
	}{
		Type:  "voice",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultCachedVoice) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultcontact
type InlineQueryResultContact struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id,omitempty"`
	// Contact's phone number
	PhoneNumber string `json:"phone_number,omitempty"`
	// Contact's first name
	FirstName string `json:"first_name,omitempty"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
	Vcard string `json:"vcard,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the contact
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Thumbnail width
	ThumbWidth int64 `json:"thumb_width,omitempty"`
	// Optional. Thumbnail height
	ThumbHeight int64 `json:"thumb_height,omitempty"`
}

func (v InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultContact
	a := struct {
		Type string
		alias
	}{
		Type:  "contact",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultContact) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultdocument
type InlineQueryResultDocument struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// A valid URL for the file
	DocumentUrl string `json:"document_url,omitempty"`
	// Mime type of the content of the file, either "application/pdf" or "application/zip"
	MimeType string `json:"mime_type,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the file
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. URL of the thumbnail (jpeg only) for the file
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Thumbnail width
	ThumbWidth int64 `json:"thumb_width,omitempty"`
	// Optional. Thumbnail height
	ThumbHeight int64 `json:"thumb_height,omitempty"`
}

func (v InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultDocument
	a := struct {
		Type string
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultDocument) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a Game.
// Note: This will only work in Telegram versions released after October 1, 2016. Older clients will not display any inline results if a game result is among them.
// https://core.telegram.org/bots/api#inlinequeryresultgame
type InlineQueryResultGame struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// Short name of the game
	GameShortName string `json:"game_short_name,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

func (v InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultGame
	a := struct {
		Type string
		alias
	}{
		Type:  "game",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultGame) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
// https://core.telegram.org/bots/api#inlinequeryresultgif
type InlineQueryResultGif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL for the GIF file. File size must not exceed 1MB
	GifUrl string `json:"gif_url,omitempty"`
	// Optional. Width of the GIF
	GifWidth int64 `json:"gif_width,omitempty"`
	// Optional. Height of the GIF
	GifHeight int64 `json:"gif_height,omitempty"`
	// Optional. Duration of the GIF
	GifDuration int64 `json:"gif_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	ThumbMimeType string `json:"thumb_mime_type,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the GIF animation
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultGif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultGif
	a := struct {
		Type string
		alias
	}{
		Type:  "gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultGif) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultlocation
type InlineQueryResultLocation struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id,omitempty"`
	// Location latitude in degrees
	Latitude float64 `json:"latitude,omitempty"`
	// Location longitude in degrees
	Longitude float64 `json:"longitude,omitempty"`
	// Location title
	Title string `json:"title,omitempty"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64 `json:"heading,omitempty"`
	// Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the location
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Thumbnail width
	ThumbWidth int64 `json:"thumb_width,omitempty"`
	// Optional. Thumbnail height
	ThumbHeight int64 `json:"thumb_height,omitempty"`
}

func (v InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultLocation
	a := struct {
		Type string
		alias
	}{
		Type:  "location",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultLocation) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
// https://core.telegram.org/bots/api#inlinequeryresultmpeg4gif
type InlineQueryResultMpeg4Gif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL for the MP4 file. File size must not exceed 1MB
	Mpeg4Url string `json:"mpeg4_url,omitempty"`
	// Optional. Video width
	Mpeg4Width int64 `json:"mpeg4_width,omitempty"`
	// Optional. Video height
	Mpeg4Height int64 `json:"mpeg4_height,omitempty"`
	// Optional. Video duration
	Mpeg4Duration int64 `json:"mpeg4_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	ThumbMimeType string `json:"thumb_mime_type,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video animation
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultMpeg4Gif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultMpeg4Gif
	a := struct {
		Type string
		alias
	}{
		Type:  "mpeg4_gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultMpeg4Gif) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
// https://core.telegram.org/bots/api#inlinequeryresultphoto
type InlineQueryResultPhoto struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL of the photo. Photo must be in jpeg format. Photo size must not exceed 5MB
	PhotoUrl string `json:"photo_url,omitempty"`
	// URL of the thumbnail for the photo
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Width of the photo
	PhotoWidth int64 `json:"photo_width,omitempty"`
	// Optional. Height of the photo
	PhotoHeight int64 `json:"photo_height,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the photo
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultPhoto
	a := struct {
		Type string
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultPhoto) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultvenue
type InlineQueryResultVenue struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id,omitempty"`
	// Latitude of the venue location in degrees
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude of the venue location in degrees
	Longitude float64 `json:"longitude,omitempty"`
	// Title of the venue
	Title string `json:"title,omitempty"`
	// Address of the venue
	Address string `json:"address,omitempty"`
	// Optional. Foursquare identifier of the venue if known
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the venue
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Optional. Thumbnail width
	ThumbWidth int64 `json:"thumb_width,omitempty"`
	// Optional. Thumbnail height
	ThumbHeight int64 `json:"thumb_height,omitempty"`
}

func (v InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVenue
	a := struct {
		Type string
		alias
	}{
		Type:  "venue",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultVenue) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
// https://core.telegram.org/bots/api#inlinequeryresultvideo
type InlineQueryResultVideo struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL for the embedded video player or video file
	VideoUrl string `json:"video_url,omitempty"`
	// Mime type of the content of video url, "text/html" or "video/mp4"
	MimeType string `json:"mime_type,omitempty"`
	// URL of the thumbnail (jpeg only) for the video
	ThumbUrl string `json:"thumb_url,omitempty"`
	// Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Video width
	VideoWidth int64 `json:"video_width,omitempty"`
	// Optional. Video height
	VideoHeight int64 `json:"video_height,omitempty"`
	// Optional. Video duration in seconds
	VideoDuration int64 `json:"video_duration,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVideo
	a := struct {
		Type string
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultVideo) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
// Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
// https://core.telegram.org/bots/api#inlinequeryresultvoice
type InlineQueryResultVoice struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id,omitempty"`
	// A valid URL for the voice recording
	VoiceUrl string `json:"voice_url,omitempty"`
	// Recording title
	Title string `json:"title,omitempty"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Recording duration in seconds
	VoiceDuration int64 `json:"voice_duration,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the voice recording
	InputMessageContent *InputMessageContent `json:"input_message_content,omitempty"`
}

func (v InlineQueryResultVoice) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVoice
	a := struct {
		Type string
		alias
	}{
		Type:  "voice",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InlineQueryResultVoice) InlineQueryResult() ([]byte, error) {
	return json.Marshal(v)
}

// Represents the content of a contact message to be sent as the result of an inline query.
// https://core.telegram.org/bots/api#inputcontactmessagecontent
type InputContactMessageContent struct {
	// Contact's phone number
	PhoneNumber string `json:"phone_number,omitempty"`
	// Contact's first name
	FirstName string `json:"first_name,omitempty"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
	Vcard string `json:"vcard,omitempty"`
}

func (v InputContactMessageContent) InputMessageContent() ([]byte, error) {
	return json.Marshal(v)
}

// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
// There are three ways to send files (photos, stickers, audio, media, etc.):
// Sending by file_id
// Sending by URL
// Objects and methods used in the inline mode are described in the Inline mode section.
// https://core.telegram.org/bots/api#inputfile
type InputFile interface{}

// Represents the content of a location message to be sent as the result of an inline query.
// https://core.telegram.org/bots/api#inputlocationmessagecontent
type InputLocationMessageContent struct {
	// Latitude of the location in degrees
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude of the location in degrees
	Longitude float64 `json:"longitude,omitempty"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64 `json:"heading,omitempty"`
	// Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
}

func (v InputLocationMessageContent) InputMessageContent() ([]byte, error) {
	return json.Marshal(v)
}

// This object represents the content of a media message to be sent. It should be one of
// https://core.telegram.org/bots/api#inputmedia
type InputMedia interface {
	InputMediaParams(string, map[string]NamedReader) ([]byte, error)
}

// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
// https://core.telegram.org/bots/api#inputmediaanimation
type InputMediaAnimation struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »
	Media InputFile `json:"media,omitempty"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »
	Thumb *InputFile `json:"thumb,omitempty"`
	// Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Animation width
	Width int64 `json:"width,omitempty"`
	// Optional. Animation height
	Height int64 `json:"height,omitempty"`
	// Optional. Animation duration
	Duration int64 `json:"duration,omitempty"`
}

func (v InputMediaAnimation) MarshalJSON() ([]byte, error) {
	type alias InputMediaAnimation
	a := struct {
		Type string
		alias
	}{
		Type:  "animation",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InputMediaAnimation) InputMediaParams(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}

	return json.Marshal(v)
}

// Represents an audio file to be treated as music to be sent.
// https://core.telegram.org/bots/api#inputmediaaudio
type InputMediaAudio struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »
	Media InputFile `json:"media,omitempty"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »
	Thumb *InputFile `json:"thumb,omitempty"`
	// Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Duration of the audio in seconds
	Duration int64 `json:"duration,omitempty"`
	// Optional. Performer of the audio
	Performer string `json:"performer,omitempty"`
	// Optional. Title of the audio
	Title string `json:"title,omitempty"`
}

func (v InputMediaAudio) MarshalJSON() ([]byte, error) {
	type alias InputMediaAudio
	a := struct {
		Type string
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InputMediaAudio) InputMediaParams(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}

	return json.Marshal(v)
}

// Represents a general file to be sent.
// https://core.telegram.org/bots/api#inputmediadocument
type InputMediaDocument struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »
	Media InputFile `json:"media,omitempty"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »
	Thumb *InputFile `json:"thumb,omitempty"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
	DisableContentTypeDetection bool `json:"disable_content_type_detection,omitempty"`
}

func (v InputMediaDocument) MarshalJSON() ([]byte, error) {
	type alias InputMediaDocument
	a := struct {
		Type string
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InputMediaDocument) InputMediaParams(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}

	return json.Marshal(v)
}

// Represents a photo to be sent.
// https://core.telegram.org/bots/api#inputmediaphoto
type InputMediaPhoto struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »
	Media InputFile `json:"media,omitempty"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
}

func (v InputMediaPhoto) MarshalJSON() ([]byte, error) {
	type alias InputMediaPhoto
	a := struct {
		Type string
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InputMediaPhoto) InputMediaParams(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}

	return json.Marshal(v)
}

// Represents a video to be sent.
// https://core.telegram.org/bots/api#inputmediavideo
type InputMediaVideo struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »
	Media InputFile `json:"media,omitempty"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »
	Thumb *InputFile `json:"thumb,omitempty"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Video width
	Width int64 `json:"width,omitempty"`
	// Optional. Video height
	Height int64 `json:"height,omitempty"`
	// Optional. Video duration
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True, if the uploaded video is suitable for streaming
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
}

func (v InputMediaVideo) MarshalJSON() ([]byte, error) {
	type alias InputMediaVideo
	a := struct {
		Type string
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

func (v InputMediaVideo) InputMediaParams(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}

	return json.Marshal(v)
}

// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
// https://core.telegram.org/bots/api#inputmessagecontent
type InputMessageContent interface {
	InputMessageContent() ([]byte, error)
}

// Represents the content of a text message to be sent as the result of an inline query.
// https://core.telegram.org/bots/api#inputtextmessagecontent
type InputTextMessageContent struct {
	// Text of the message to be sent, 1-4096 characters
	MessageText string `json:"message_text,omitempty"`
	// Optional. Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in message text, which can be specified instead of parse_mode
	Entities []MessageEntity `json:"entities,omitempty"`
	// Optional. Disables link previews for links in the sent message
	DisableWebPagePreview bool `json:"disable_web_page_preview,omitempty"`
}

func (v InputTextMessageContent) InputMessageContent() ([]byte, error) {
	return json.Marshal(v)
}

// Represents the content of a venue message to be sent as the result of an inline query.
// https://core.telegram.org/bots/api#inputvenuemessagecontent
type InputVenueMessageContent struct {
	// Latitude of the venue in degrees
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude of the venue in degrees
	Longitude float64 `json:"longitude,omitempty"`
	// Name of the venue
	Title string `json:"title,omitempty"`
	// Address of the venue
	Address string `json:"address,omitempty"`
	// Optional. Foursquare identifier of the venue, if known
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
}

func (v InputVenueMessageContent) InputMessageContent() ([]byte, error) {
	return json.Marshal(v)
}

// This object contains basic information about an invoice.
// https://core.telegram.org/bots/api#invoice
type Invoice struct {
	// Product name
	Title string `json:"title,omitempty"`
	// Product description
	Description string `json:"description,omitempty"`
	// Unique bot deep-linking parameter that can be used to generate this invoice
	StartParameter string `json:"start_parameter,omitempty"`
	// Three-letter ISO 4217 currency code
	Currency string `json:"currency,omitempty"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount,omitempty"`
}

// This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields request_contact, request_location, and request_poll are mutually exclusive.
// Note: request_contact and request_location options will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported message.Note: request_poll option will only work in Telegram versions released after 23 January, 2020. Older clients will display unsupported message.
// https://core.telegram.org/bots/api#keyboardbutton
type KeyboardButton struct {
	// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
	Text string `json:"text,omitempty"`
	// Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
	RequestContact bool `json:"request_contact,omitempty"`
	// Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only
	RequestLocation bool `json:"request_location,omitempty"`
	// Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only
	RequestPoll *KeyboardButtonPollType `json:"request_poll,omitempty"`
}

// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
// https://core.telegram.org/bots/api#keyboardbuttonpolltype
type KeyboardButtonPollType struct {
	// Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
	Type string `json:"type,omitempty"`
}

// This object represents a portion of the price for goods or services.
// https://core.telegram.org/bots/api#labeledprice
type LabeledPrice struct {
	// Portion label
	Label string `json:"label,omitempty"`
	// Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	Amount int64 `json:"amount,omitempty"`
}

// This object represents a point on the map.
// https://core.telegram.org/bots/api#location
type Location struct {
	// Longitude as defined by sender
	Longitude float64 `json:"longitude,omitempty"`
	// Latitude as defined by sender
	Latitude float64 `json:"latitude,omitempty"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
	Heading int64 `json:"heading,omitempty"`
	// Optional. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
}

// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
// Telegram apps support these buttons as of version 5.7.
// https://core.telegram.org/bots/api#loginurl
type LoginUrl struct {
	// An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.
	Url string `json:"url,omitempty"`
	// Optional. New text of the button in forwarded messages.
	ForwardText string `json:"forward_text,omitempty"`
	// Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
	BotUsername string `json:"bot_username,omitempty"`
	// Optional. Pass True to request the permission for your bot to send messages to the user.
	RequestWriteAccess bool `json:"request_write_access,omitempty"`
}

// This object describes the position on faces where a mask should be placed by default.
// https://core.telegram.org/bots/api#maskposition
type MaskPosition struct {
	// The part of the face relative to which the mask should be placed. One of "forehead", "eyes", "mouth", or "chin".
	Point string `json:"point,omitempty"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
	XShift float64 `json:"x_shift,omitempty"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
	YShift float64 `json:"y_shift,omitempty"`
	// Mask scaling coefficient. For example, 2.0 means double size.
	Scale float64 `json:"scale,omitempty"`
}

// This object represents a message.
// https://core.telegram.org/bots/api#message
type Message struct {
	// Unique message identifier inside this chat
	MessageId int64 `json:"message_id,omitempty"`
	// Optional. Sender, empty for messages sent to channels
	From *User `json:"from,omitempty"`
	// Optional. Sender of the message, sent on behalf of a chat. The channel itself for channel messages. The supergroup itself for messages from anonymous group administrators. The linked channel for messages automatically forwarded to the discussion group
	SenderChat *Chat `json:"sender_chat,omitempty"`
	// Date the message was sent in Unix time
	Date int64 `json:"date,omitempty"`
	// Conversation the message belongs to
	Chat Chat `json:"chat,omitempty"`
	// Optional. For forwarded messages, sender of the original message
	ForwardFrom *User `json:"forward_from,omitempty"`
	// Optional. For messages forwarded from channels or from anonymous administrators, information about the original sender chat
	ForwardFromChat *Chat `json:"forward_from_chat,omitempty"`
	// Optional. For messages forwarded from channels, identifier of the original message in the channel
	ForwardFromMessageId int64 `json:"forward_from_message_id,omitempty"`
	// Optional. For messages forwarded from channels, signature of the post author if present
	ForwardSignature string `json:"forward_signature,omitempty"`
	// Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
	ForwardSenderName string `json:"forward_sender_name,omitempty"`
	// Optional. For forwarded messages, date the original message was sent in Unix time
	ForwardDate int64 `json:"forward_date,omitempty"`
	// Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	ReplyToMessage *Message `json:"reply_to_message,omitempty"`
	// Optional. Bot through which the message was sent
	ViaBot *User `json:"via_bot,omitempty"`
	// Optional. Date the message was last edited in Unix time
	EditDate int64 `json:"edit_date,omitempty"`
	// Optional. The unique identifier of a media message group this message belongs to
	MediaGroupId string `json:"media_group_id,omitempty"`
	// Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
	AuthorSignature string `json:"author_signature,omitempty"`
	// Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters
	Text string `json:"text,omitempty"`
	// Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
	Entities []MessageEntity `json:"entities,omitempty"`
	// Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
	Animation *Animation `json:"animation,omitempty"`
	// Optional. Message is an audio file, information about the file
	Audio *Audio `json:"audio,omitempty"`
	// Optional. Message is a general file, information about the file
	Document *Document `json:"document,omitempty"`
	// Optional. Message is a photo, available sizes of the photo
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. Message is a sticker, information about the sticker
	Sticker *Sticker `json:"sticker,omitempty"`
	// Optional. Message is a video, information about the video
	Video *Video `json:"video,omitempty"`
	// Optional. Message is a video note, information about the video message
	VideoNote *VideoNote `json:"video_note,omitempty"`
	// Optional. Message is a voice message, information about the file
	Voice *Voice `json:"voice,omitempty"`
	// Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
	Caption string `json:"caption,omitempty"`
	// Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Message is a shared contact, information about the contact
	Contact *Contact `json:"contact,omitempty"`
	// Optional. Message is a dice with random value from 1 to 6
	Dice *Dice `json:"dice,omitempty"`
	// Optional. Message is a game, information about the game. More about games »
	Game *Game `json:"game,omitempty"`
	// Optional. Message is a native poll, information about the poll
	Poll *Poll `json:"poll,omitempty"`
	// Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
	Venue *Venue `json:"venue,omitempty"`
	// Optional. Message is a shared location, information about the location
	Location *Location `json:"location,omitempty"`
	// Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
	NewChatMembers []User `json:"new_chat_members,omitempty"`
	// Optional. A member was removed from the group, information about them (this member may be the bot itself)
	LeftChatMember *User `json:"left_chat_member,omitempty"`
	// Optional. A chat title was changed to this value
	NewChatTitle string `json:"new_chat_title,omitempty"`
	// Optional. A chat photo was change to this value
	NewChatPhoto []PhotoSize `json:"new_chat_photo,omitempty"`
	// Optional. Service message: the chat photo was deleted
	DeleteChatPhoto bool `json:"delete_chat_photo,omitempty"`
	// Optional. Service message: the group has been created
	GroupChatCreated bool `json:"group_chat_created,omitempty"`
	// Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
	SupergroupChatCreated bool `json:"supergroup_chat_created,omitempty"`
	// Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
	ChannelChatCreated bool `json:"channel_chat_created,omitempty"`
	// Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId int64 `json:"migrate_to_chat_id,omitempty"`
	// Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateFromChatId int64 `json:"migrate_from_chat_id,omitempty"`
	// Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.
	PinnedMessage *Message `json:"pinned_message,omitempty"`
	// Optional. Message is an invoice for a payment, information about the invoice. More about payments »
	Invoice *Invoice `json:"invoice,omitempty"`
	// Optional. Message is a service message about a successful payment, information about the payment. More about payments »
	SuccessfulPayment *SuccessfulPayment `json:"successful_payment,omitempty"`
	// Optional. The domain name of the website on which the user has logged in. More about Telegram Login »
	ConnectedWebsite string `json:"connected_website,omitempty"`
	// Optional. Telegram Passport data
	PassportData *PassportData `json:"passport_data,omitempty"`
	// Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
	ProximityAlertTriggered *ProximityAlertTriggered `json:"proximity_alert_triggered,omitempty"`
	// Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
// https://core.telegram.org/bots/api#messageentity
type MessageEntity struct {
	// Type of the entity. Can be "mention" (@username), "hashtag" (#hashtag), "cashtag" ($USD), "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email" (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic" (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable text URLs), "text_mention" (for users without usernames)
	Type string `json:"type,omitempty"`
	// Offset in UTF-16 code units to the start of the entity
	Offset int64 `json:"offset,omitempty"`
	// Length of the entity in UTF-16 code units
	Length int64 `json:"length,omitempty"`
	// Optional. For "text_link" only, url that will be opened after user taps on the text
	Url string `json:"url,omitempty"`
	// Optional. For "text_mention" only, the mentioned user
	User *User `json:"user,omitempty"`
	// Optional. For "pre" only, the programming language of the entity text
	Language string `json:"language,omitempty"`
}

// This object represents a unique message identifier.
// https://core.telegram.org/bots/api#messageid
type MessageId struct {
	// Unique message identifier
	MessageId int64 `json:"message_id,omitempty"`
}

// This object represents information about an order.
// https://core.telegram.org/bots/api#orderinfo
type OrderInfo struct {
	// Optional. User name
	Name string `json:"name,omitempty"`
	// Optional. User's phone number
	PhoneNumber string `json:"phone_number,omitempty"`
	// Optional. User email
	Email string `json:"email,omitempty"`
	// Optional. User shipping address
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

// Contains information about Telegram Passport data shared with the bot by the user.
// https://core.telegram.org/bots/api#passportdata
type PassportData struct {
	// Array with information about documents and other Telegram Passport elements that was shared with the bot
	Data []EncryptedPassportElement `json:"data,omitempty"`
	// Encrypted credentials required to decrypt the data
	Credentials EncryptedCredentials `json:"credentials,omitempty"`
}

// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
// https://core.telegram.org/bots/api#passportelementerror
type PassportElementError interface {
	PassportElementError() ([]byte, error)
}

// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
// https://core.telegram.org/bots/api#passportelementerrordatafield
type PassportElementErrorDataField struct {
	// Error source, must be data
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the error, one of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address"
	Type string `json:"type,omitempty"`
	// Name of the data field which has the error
	FieldName string `json:"field_name,omitempty"`
	// Base64-encoded data hash
	DataHash string `json:"data_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorDataField) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
// https://core.telegram.org/bots/api#passportelementerrorfile
type PassportElementErrorFile struct {
	// Error source, must be file
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type,omitempty"`
	// Base64-encoded file hash
	FileHash string `json:"file_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorFile) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
// https://core.telegram.org/bots/api#passportelementerrorfiles
type PassportElementErrorFiles struct {
	// Error source, must be files
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type,omitempty"`
	// List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorFiles) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
// https://core.telegram.org/bots/api#passportelementerrorfrontside
type PassportElementErrorFrontSide struct {
	// Error source, must be front_side
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	Type string `json:"type,omitempty"`
	// Base64-encoded hash of the file with the front side of the document
	FileHash string `json:"file_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorFrontSide) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
// https://core.telegram.org/bots/api#passportelementerrorreverseside
type PassportElementErrorReverseSide struct {
	// Error source, must be reverse_side
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the issue, one of "driver_license", "identity_card"
	Type string `json:"type,omitempty"`
	// Base64-encoded hash of the file with the reverse side of the document
	FileHash string `json:"file_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorReverseSide) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
// https://core.telegram.org/bots/api#passportelementerrorselfie
type PassportElementErrorSelfie struct {
	// Error source, must be selfie
	Source string `json:"source,omitempty"`
	// The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	Type string `json:"type,omitempty"`
	// Base64-encoded hash of the file with the selfie
	FileHash string `json:"file_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorSelfie) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
// https://core.telegram.org/bots/api#passportelementerrortranslationfile
type PassportElementErrorTranslationFile struct {
	// Error source, must be translation_file
	Source string `json:"source,omitempty"`
	// Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type,omitempty"`
	// Base64-encoded file hash
	FileHash string `json:"file_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorTranslationFile) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
// https://core.telegram.org/bots/api#passportelementerrortranslationfiles
type PassportElementErrorTranslationFiles struct {
	// Error source, must be translation_files
	Source string `json:"source,omitempty"`
	// Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type,omitempty"`
	// List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorTranslationFiles) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
// https://core.telegram.org/bots/api#passportelementerrorunspecified
type PassportElementErrorUnspecified struct {
	// Error source, must be unspecified
	Source string `json:"source,omitempty"`
	// Type of element of the user's Telegram Passport which has the issue
	Type string `json:"type,omitempty"`
	// Base64-encoded element hash
	ElementHash string `json:"element_hash,omitempty"`
	// Error message
	Message string `json:"message,omitempty"`
}

func (v PassportElementErrorUnspecified) PassportElementError() ([]byte, error) {
	return json.Marshal(v)
}

// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
// https://core.telegram.org/bots/api#passportfile
type PassportFile struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// File size
	FileSize int64 `json:"file_size,omitempty"`
	// Unix time when the file was uploaded
	FileDate int64 `json:"file_date,omitempty"`
}

// This object represents one size of a photo or a file / sticker thumbnail.
// https://core.telegram.org/bots/api#photosize
type PhotoSize struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Photo width
	Width int64 `json:"width,omitempty"`
	// Photo height
	Height int64 `json:"height,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// This object contains information about a poll.
// https://core.telegram.org/bots/api#poll
type Poll struct {
	// Unique poll identifier
	Id string `json:"id,omitempty"`
	// Poll question, 1-255 characters
	Question string `json:"question,omitempty"`
	// List of poll options
	Options []PollOption `json:"options,omitempty"`
	// Total number of users that voted in the poll
	TotalVoterCount int64 `json:"total_voter_count,omitempty"`
	// True, if the poll is closed
	IsClosed bool `json:"is_closed,omitempty"`
	// True, if the poll is anonymous
	IsAnonymous bool `json:"is_anonymous,omitempty"`
	// Poll type, currently can be "regular" or "quiz"
	Type string `json:"type,omitempty"`
	// True, if the poll allows multiple answers
	AllowsMultipleAnswers bool `json:"allows_multiple_answers,omitempty"`
	// Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	CorrectOptionId int64 `json:"correct_option_id,omitempty"`
	// Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
	Explanation string `json:"explanation,omitempty"`
	// Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
	ExplanationEntities []MessageEntity `json:"explanation_entities,omitempty"`
	// Optional. Amount of time in seconds the poll will be active after creation
	OpenPeriod int64 `json:"open_period,omitempty"`
	// Optional. Point in time (Unix timestamp) when the poll will be automatically closed
	CloseDate int64 `json:"close_date,omitempty"`
}

// This object represents an answer of a user in a non-anonymous poll.
// https://core.telegram.org/bots/api#pollanswer
type PollAnswer struct {
	// Unique poll identifier
	PollId string `json:"poll_id,omitempty"`
	// The user, who changed the answer to the poll
	User User `json:"user,omitempty"`
	// 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
	OptionIds []int64 `json:"option_ids,omitempty"`
}

// This object contains information about one answer option in a poll.
// https://core.telegram.org/bots/api#polloption
type PollOption struct {
	// Option text, 1-100 characters
	Text string `json:"text,omitempty"`
	// Number of users that voted for this option
	VoterCount int64 `json:"voter_count,omitempty"`
}

// This object contains information about an incoming pre-checkout query.
// https://core.telegram.org/bots/api#precheckoutquery
type PreCheckoutQuery struct {
	// Unique query identifier
	Id string `json:"id,omitempty"`
	// User who sent the query
	From User `json:"from,omitempty"`
	// Three-letter ISO 4217 currency code
	Currency string `json:"currency,omitempty"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount,omitempty"`
	// Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload,omitempty"`
	// Optional. Identifier of the shipping option chosen by the user
	ShippingOptionId string `json:"shipping_option_id,omitempty"`
	// Optional. Order info provided by the user
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
}

// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
// https://core.telegram.org/bots/api#proximityalerttriggered
type ProximityAlertTriggered struct {
	// User that triggered the alert
	Traveler User `json:"traveler,omitempty"`
	// User that set the alert
	Watcher User `json:"watcher,omitempty"`
	// The distance between the users
	Distance int64 `json:"distance,omitempty"`
}

// This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).
// https://core.telegram.org/bots/api#replykeyboardmarkup
type ReplyKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of KeyboardButton objects
	Keyboard [][]KeyboardButton `json:"keyboard,omitempty"`
	// Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
	ResizeKeyboard bool `json:"resize_keyboard,omitempty"`
	// Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
	OneTimeKeyboard bool `json:"one_time_keyboard,omitempty"`
	// Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
	Selective bool `json:"selective,omitempty"`
}

func (v ReplyKeyboardMarkup) ReplyMarkup() ([]byte, error) {
	return json.Marshal(v)
}

// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).
// https://core.telegram.org/bots/api#replykeyboardremove
type ReplyKeyboardRemove struct {
	// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
	RemoveKeyboard bool `json:"remove_keyboard,omitempty"`
	// Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
	Selective bool `json:"selective,omitempty"`
}

func (v ReplyKeyboardRemove) ReplyMarkup() ([]byte, error) {
	return json.Marshal(v)
}

// Contains information about why a request was unsuccessful.
// https://core.telegram.org/bots/api#responseparameters
type ResponseParameters struct {
	// Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId int64 `json:"migrate_to_chat_id,omitempty"`
	// Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
	RetryAfter int64 `json:"retry_after,omitempty"`
}

// This object represents a shipping address.
// https://core.telegram.org/bots/api#shippingaddress
type ShippingAddress struct {
	// ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code,omitempty"`
	// State, if applicable
	State string `json:"state,omitempty"`
	// City
	City string `json:"city,omitempty"`
	// First line for the address
	StreetLine1 string `json:"street_line1,omitempty"`
	// Second line for the address
	StreetLine2 string `json:"street_line2,omitempty"`
	// Address post code
	PostCode string `json:"post_code,omitempty"`
}

// This object represents one shipping option.
// https://core.telegram.org/bots/api#shippingoption
type ShippingOption struct {
	// Shipping option identifier
	Id string `json:"id,omitempty"`
	// Option title
	Title string `json:"title,omitempty"`
	// List of price portions
	Prices []LabeledPrice `json:"prices,omitempty"`
}

// This object contains information about an incoming shipping query.
// https://core.telegram.org/bots/api#shippingquery
type ShippingQuery struct {
	// Unique query identifier
	Id string `json:"id,omitempty"`
	// User who sent the query
	From User `json:"from,omitempty"`
	// Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload,omitempty"`
	// User specified shipping address
	ShippingAddress ShippingAddress `json:"shipping_address,omitempty"`
}

// This object represents a sticker.
// https://core.telegram.org/bots/api#sticker
type Sticker struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Sticker width
	Width int64 `json:"width,omitempty"`
	// Sticker height
	Height int64 `json:"height,omitempty"`
	// True, if the sticker is animated
	IsAnimated bool `json:"is_animated,omitempty"`
	// Optional. Sticker thumbnail in the .WEBP or .JPG format
	Thumb *PhotoSize `json:"thumb,omitempty"`
	// Optional. Emoji associated with the sticker
	Emoji string `json:"emoji,omitempty"`
	// Optional. Name of the sticker set to which the sticker belongs
	SetName string `json:"set_name,omitempty"`
	// Optional. For mask stickers, the position where the mask should be placed
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// This object represents a sticker set.
// https://core.telegram.org/bots/api#stickerset
type StickerSet struct {
	// Sticker set name
	Name string `json:"name,omitempty"`
	// Sticker set title
	Title string `json:"title,omitempty"`
	// True, if the sticker set contains animated stickers
	IsAnimated bool `json:"is_animated,omitempty"`
	// True, if the sticker set contains masks
	ContainsMasks bool `json:"contains_masks,omitempty"`
	// List of all set stickers
	Stickers []Sticker `json:"stickers,omitempty"`
	// Optional. Sticker set thumbnail in the .WEBP or .TGS format
	Thumb *PhotoSize `json:"thumb,omitempty"`
}

// This object contains basic information about a successful payment.
// https://core.telegram.org/bots/api#successfulpayment
type SuccessfulPayment struct {
	// Three-letter ISO 4217 currency code
	Currency string `json:"currency,omitempty"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount,omitempty"`
	// Bot specified invoice payload
	InvoicePayload string `json:"invoice_payload,omitempty"`
	// Optional. Identifier of the shipping option chosen by the user
	ShippingOptionId string `json:"shipping_option_id,omitempty"`
	// Optional. Order info provided by the user
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id,omitempty"`
	// Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id,omitempty"`
}

// This object represents an incoming update.At most one of the optional parameters can be present in any given update.
// https://core.telegram.org/bots/api#update
type Update struct {
	// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
	UpdateId int64 `json:"update_id,omitempty"`
	// Optional. New incoming message of any kind — text, photo, sticker, etc.
	Message *Message `json:"message,omitempty"`
	// Optional. New version of a message that is known to the bot and was edited
	EditedMessage *Message `json:"edited_message,omitempty"`
	// Optional. New incoming channel post of any kind — text, photo, sticker, etc.
	ChannelPost *Message `json:"channel_post,omitempty"`
	// Optional. New version of a channel post that is known to the bot and was edited
	EditedChannelPost *Message `json:"edited_channel_post,omitempty"`
	// Optional. New incoming inline query
	InlineQuery *InlineQuery `json:"inline_query,omitempty"`
	// Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
	ChosenInlineResult *ChosenInlineResult `json:"chosen_inline_result,omitempty"`
	// Optional. New incoming callback query
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`
	// Optional. New incoming shipping query. Only for invoices with flexible price
	ShippingQuery *ShippingQuery `json:"shipping_query,omitempty"`
	// Optional. New incoming pre-checkout query. Contains full information about checkout
	PreCheckoutQuery *PreCheckoutQuery `json:"pre_checkout_query,omitempty"`
	// Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
	Poll *Poll `json:"poll,omitempty"`
	// Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
	PollAnswer *PollAnswer `json:"poll_answer,omitempty"`
}

// This object represents a Telegram user or bot.
// https://core.telegram.org/bots/api#user
type User struct {
	// Unique identifier for this user or bot
	Id int64 `json:"id,omitempty"`
	// True, if this user is a bot
	IsBot bool `json:"is_bot,omitempty"`
	// User's or bot's first name
	FirstName string `json:"first_name,omitempty"`
	// Optional. User's or bot's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. User's or bot's username
	Username string `json:"username,omitempty"`
	// Optional. IETF language tag of the user's language
	LanguageCode string `json:"language_code,omitempty"`
	// Optional. True, if the bot can be invited to groups. Returned only in getMe.
	CanJoinGroups bool `json:"can_join_groups,omitempty"`
	// Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
	CanReadAllGroupMessages bool `json:"can_read_all_group_messages,omitempty"`
	// Optional. True, if the bot supports inline queries. Returned only in getMe.
	SupportsInlineQueries bool `json:"supports_inline_queries,omitempty"`
}

// This object represent a user's profile pictures.
// https://core.telegram.org/bots/api#userprofilephotos
type UserProfilePhotos struct {
	// Total number of profile pictures the target user has
	TotalCount int64 `json:"total_count,omitempty"`
	// Requested profile pictures (in up to 4 sizes each)
	Photos [][]PhotoSize `json:"photos,omitempty"`
}

// This object represents a venue.
// https://core.telegram.org/bots/api#venue
type Venue struct {
	// Venue location. Can't be a live location
	Location Location `json:"location,omitempty"`
	// Name of the venue
	Title string `json:"title,omitempty"`
	// Address of the venue
	Address string `json:"address,omitempty"`
	// Optional. Foursquare identifier of the venue
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
}

// This object represents a video file.
// https://core.telegram.org/bots/api#video
type Video struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Video width as defined by sender
	Width int64 `json:"width,omitempty"`
	// Video height as defined by sender
	Height int64 `json:"height,omitempty"`
	// Duration of the video in seconds as defined by sender
	Duration int64 `json:"duration,omitempty"`
	// Optional. Video thumbnail
	Thumb *PhotoSize `json:"thumb,omitempty"`
	// Optional. Original filename as defined by sender
	FileName string `json:"file_name,omitempty"`
	// Optional. Mime type of a file as defined by sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// This object represents a video message (available in Telegram apps as of v.4.0).
// https://core.telegram.org/bots/api#videonote
type VideoNote struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Video width and height (diameter of the video message) as defined by sender
	Length int64 `json:"length,omitempty"`
	// Duration of the video in seconds as defined by sender
	Duration int64 `json:"duration,omitempty"`
	// Optional. Video thumbnail
	Thumb *PhotoSize `json:"thumb,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// This object represents a voice note.
// https://core.telegram.org/bots/api#voice
type Voice struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id,omitempty"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id,omitempty"`
	// Duration of the audio in seconds as defined by sender
	Duration int64 `json:"duration,omitempty"`
	// Optional. MIME type of the file as defined by sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size
	FileSize int64 `json:"file_size,omitempty"`
}

// Contains information about the current status of a webhook.
// https://core.telegram.org/bots/api#webhookinfo
type WebhookInfo struct {
	// Webhook URL, may be empty if webhook is not set up
	Url string `json:"url,omitempty"`
	// True, if a custom certificate was provided for webhook certificate checks
	HasCustomCertificate bool `json:"has_custom_certificate,omitempty"`
	// Number of updates awaiting delivery
	PendingUpdateCount int64 `json:"pending_update_count,omitempty"`
	// Optional. Currently used webhook IP address
	IpAddress string `json:"ip_address,omitempty"`
	// Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
	LastErrorDate int64 `json:"last_error_date,omitempty"`
	// Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
	LastErrorMessage string `json:"last_error_message,omitempty"`
	// Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
	MaxConnections int64 `json:"max_connections,omitempty"`
	// Optional. A list of update types the bot is subscribed to. Defaults to all update types
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
}
